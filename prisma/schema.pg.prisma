generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JudgeCategory {
  TECHNICALITY
  AESTHETICS
  COMPOSITION
}

enum HeatStatus {
  SCHEDULED
  LIVE
  LOCKED
}

enum RunStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  VOID
}

enum ScoreCategory {
  TECHNICALITY
  AESTHETICS
  COMPOSITION
}

model Event {
  id        String    @id @default(uuid())
  name      String
  startDate DateTime? @map("start_date")
  venue     String?
  config    Json?     @map("config_json")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  divisions Division[]
  judges    Judge[]
  audits    AuditLog[]

  @@map("events")
}

model Division {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String   @map("event_id")
  name      String
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  heats      Heat[]
  skaters    Skater[]
  placements Placement[]

  @@index([eventId, order])
  @@map("divisions")
}

model Heat {
  id         String     @id @default(uuid())
  division   Division   @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  divisionId String     @map("division_id")
  name       String
  order      Int        @default(0)
  status     HeatStatus @default(SCHEDULED)
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  runs Run[]

  @@index([divisionId, order])
  @@map("heats")
}

model Skater {
  id         String   @id @default(uuid())
  division   Division @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  divisionId String   @map("division_id")
  bib        String?
  firstName  String   @map("first_name")
  lastName   String   @map("last_name")
  sponsor    String?
  notes      String?
  order      Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  runs       Run[]
  placements Placement[]

  @@index([divisionId, order])
  @@map("skaters")
}

model Judge {
  id        String        @id @default(uuid())
  event     Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String        @map("event_id")
  name      String
  category  JudgeCategory
  pinHash   String?       @map("pin_hash")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  scores Score[]

  @@index([eventId, category])
  @@map("judges")
}

model Run {
  id        String    @id @default(uuid())
  heat      Heat      @relation(fields: [heatId], references: [id], onDelete: Cascade)
  heatId    String    @map("heat_id")
  skater    Skater    @relation(fields: [skaterId], references: [id], onDelete: Cascade)
  skaterId  String    @map("skater_id")
  runNumber Int       @map("run_number")
  status    RunStatus @default(SCHEDULED)
  startedAt DateTime? @map("started_at")
  endedAt   DateTime? @map("ended_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  scores         Score[]
  bestPlacements Placement[] @relation("BestRun")

  @@unique([heatId, skaterId, runNumber])
  @@index([skaterId])
  @@map("runs")
}

model Score {
  id         String        @id @default(uuid())
  run        Run           @relation(fields: [runId], references: [id], onDelete: Cascade)
  runId      String        @map("run_id")
  judge      Judge         @relation(fields: [judgeId], references: [id], onDelete: Cascade)
  judgeId    String        @map("judge_id")
  category   ScoreCategory
  value      Decimal       @db.Decimal(8, 2)
  clientUuid String        @map("client_uuid")
  createdAt  DateTime      @default(now()) @map("created_at")

  @@unique([runId, judgeId, category])
  @@index([judgeId])
  @@index([runId])
  @@map("scores")
}

model Placement {
  id         String   @id @default(uuid())
  division   Division @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  divisionId String   @map("division_id")
  skater     Skater   @relation(fields: [skaterId], references: [id], onDelete: Cascade)
  skaterId   String   @map("skater_id")
  bestRun    Run?     @relation("BestRun", fields: [bestRunId], references: [id], onDelete: SetNull)
  bestRunId  String?  @map("best_run_id")
  total      Decimal  @db.Decimal(8, 2)
  rank       Int
  tiebreak   Json?    @map("tiebreak_json")
  computedAt DateTime @default(now()) @map("computed_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([divisionId, skaterId])
  @@index([divisionId, rank])
  @@map("placements")
}

model AuditLog {
  id        String   @id @default(uuid())
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String?  @map("event_id")
  actor     String
  action    String
  entity    String
  entityId  String   @map("entity_id")
  data      Json?    @map("data_json")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([eventId])
  @@map("audit_logs")
}
